#version 450 core

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(r8ui, binding = 0) uniform uimage3D o_Texture;
layout(r8ui, binding = 1) uniform uimage3D o_Texture1;
layout(r8ui, binding = 2) uniform uimage3D o_Texture2;
layout(r8ui, binding = 3) uniform uimage3D o_Texture3;

uniform vec3 u_Position;

uniform int u_Res;
uniform float u_Size;

uniform int u_LightCount;

struct SphereLight {
	vec4 PositionRadius;
	vec4 ColorEmissive;
};


layout (std430, binding = 0) buffer atomicLightIDS {
    int LightIndicesCounter[];
};

layout (std430, binding = 1) buffer SSBO_SphereLights {
	SphereLight SphereLights[];
};


int Idx3DToLinear(int x, int y, int z) {
	return (z * u_Res * u_Res) + (y * u_Res) + x;
}

vec3 ToWorldSpace(vec3 VoxelPos) {
	VoxelPos /= float(u_Res);
	vec3 W = u_Size * (VoxelPos - 0.5f);
	W += u_Position;
	return W;
}

void main() { 
	ivec3 Texel =  ivec3(gl_GlobalInvocationID.xyz);

	int LinearIndex = Idx3DToLinear(Texel.x, Texel.y, Texel.z);

	vec3 WPos = ToWorldSpace(vec3(Texel));
	bool WriteLight = false;
	int WriteData = 0;

	for (int i = 0 ; i < u_LightCount ; i++) {

		vec3 Sph = SphereLights[i].PositionRadius.xyz;

		if (distance(WPos, Sph) < 4.) 
		{
			WriteLight= true;
			WriteData = i + 1;
		}
	}

	if (WriteLight) {
		int CurrentWriteTex = atomicAdd(LightIndicesCounter[LinearIndex], 1);

		if (CurrentWriteTex == 0) {
			imageStore(o_Texture, ivec3(gl_GlobalInvocationID.xyz), ivec4(WriteData));
		}

		else if (CurrentWriteTex == 1) {
			imageStore(o_Texture1, ivec3(gl_GlobalInvocationID.xyz), ivec4(WriteData));
		}

		else if (CurrentWriteTex == 2) {
			imageStore(o_Texture2, ivec3(gl_GlobalInvocationID.xyz), ivec4(WriteData));
		}

		else if (CurrentWriteTex == 3) {
			imageStore(o_Texture3, ivec3(gl_GlobalInvocationID.xyz), ivec4(WriteData));
		}
	}

} 